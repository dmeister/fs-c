package de.pc2.dedup.chunker.fixed

import de.pc2.dedup.chunker.Chunker
import de.pc2.dedup.chunker.Chunk 
import scala.collection.mutable._
 
/**
 * Chunker for Static (or Fixed)-size chunking
 * 
 * @chunkSize: Static size of all chunks generated by this chunker
 */
class FixedChunker(chunkSize: Int, digestFactory: DigestFactory) extends Chunker {
  /**
   * Creates a new fixed chunker session
   */
  def createSession() : ChunkerSession = new FixedChunkerSession()
  
  /**
   * Fixed Chunker Session
   */
  class FixedChunkerSession extends ChunkerSession {
    val currentChunk = new Array[Byte](chunkSize) 
    var currentChunkPos = 0 
		
    /**
     * Creates a new chunk from all open chunk data
     */
	def acceptChunk(h: (Chunk => Unit)) { 
	  val c = Chunk(this.currentChunkPos, digestFactory.createFromData(currentChunk, currentChunkPos))
      h(c)
	  currentChunkPos = 0
	}
		
	def chunk(data: Array[Byte], size:Int)(h: (Chunk => Unit)) {
      for(i <- 0 until size) {
        currentChunk(this.currentChunkPos) = data(i)
		currentChunkPos += 1
		if(currentChunkPos >= chunkSize) {
		  acceptChunk(h)
		}
      }
	}

    def close()(h: (Chunk => Unit)) {			
      if(currentChunkPos > 0) {
        acceptChunk(h)
      }
	}
  }
}
