// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/main/other/fs-c.proto

package de.pc2.dedup.fschunk;

public final class Protocol {
  private Protocol() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public static final class ChunkRun extends
      com.google.protobuf.GeneratedMessage {
    // Use ChunkRun.newBuilder() to construct.
    private ChunkRun() {
      initFields();
    }
    private ChunkRun(boolean noInit) {}
    
    private static final ChunkRun defaultInstance;
    public static ChunkRun getDefaultInstance() {
      return defaultInstance;
    }
    
    public ChunkRun getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return de.pc2.dedup.fschunk.Protocol.internal_static_de_pc2_dedup_fschunk_ChunkRun_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return de.pc2.dedup.fschunk.Protocol.internal_static_de_pc2_dedup_fschunk_ChunkRun_fieldAccessorTable;
    }
    
    // required string start_date = 1;
    public static final int START_DATE_FIELD_NUMBER = 1;
    private boolean hasStartDate;
    private java.lang.String startDate_ = "";
    public boolean hasStartDate() { return hasStartDate; }
    public java.lang.String getStartDate() { return startDate_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      if (!hasStartDate) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasStartDate()) {
        output.writeString(1, getStartDate());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasStartDate()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getStartDate());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static de.pc2.dedup.fschunk.Protocol.ChunkRun parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static de.pc2.dedup.fschunk.Protocol.ChunkRun parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static de.pc2.dedup.fschunk.Protocol.ChunkRun parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static de.pc2.dedup.fschunk.Protocol.ChunkRun parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static de.pc2.dedup.fschunk.Protocol.ChunkRun parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static de.pc2.dedup.fschunk.Protocol.ChunkRun parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static de.pc2.dedup.fschunk.Protocol.ChunkRun parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static de.pc2.dedup.fschunk.Protocol.ChunkRun parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static de.pc2.dedup.fschunk.Protocol.ChunkRun parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static de.pc2.dedup.fschunk.Protocol.ChunkRun parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(de.pc2.dedup.fschunk.Protocol.ChunkRun prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private de.pc2.dedup.fschunk.Protocol.ChunkRun result;
      
      // Construct using de.pc2.dedup.fschunk.Protocol.ChunkRun.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new de.pc2.dedup.fschunk.Protocol.ChunkRun();
        return builder;
      }
      
      protected de.pc2.dedup.fschunk.Protocol.ChunkRun internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new de.pc2.dedup.fschunk.Protocol.ChunkRun();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return de.pc2.dedup.fschunk.Protocol.ChunkRun.getDescriptor();
      }
      
      public de.pc2.dedup.fschunk.Protocol.ChunkRun getDefaultInstanceForType() {
        return de.pc2.dedup.fschunk.Protocol.ChunkRun.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public de.pc2.dedup.fschunk.Protocol.ChunkRun build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private de.pc2.dedup.fschunk.Protocol.ChunkRun buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public de.pc2.dedup.fschunk.Protocol.ChunkRun buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        de.pc2.dedup.fschunk.Protocol.ChunkRun returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof de.pc2.dedup.fschunk.Protocol.ChunkRun) {
          return mergeFrom((de.pc2.dedup.fschunk.Protocol.ChunkRun)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(de.pc2.dedup.fschunk.Protocol.ChunkRun other) {
        if (other == de.pc2.dedup.fschunk.Protocol.ChunkRun.getDefaultInstance()) return this;
        if (other.hasStartDate()) {
          setStartDate(other.getStartDate());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              setStartDate(input.readString());
              break;
            }
          }
        }
      }
      
      
      // required string start_date = 1;
      public boolean hasStartDate() {
        return result.hasStartDate();
      }
      public java.lang.String getStartDate() {
        return result.getStartDate();
      }
      public Builder setStartDate(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasStartDate = true;
        result.startDate_ = value;
        return this;
      }
      public Builder clearStartDate() {
        result.hasStartDate = false;
        result.startDate_ = getDefaultInstance().getStartDate();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:de.pc2.dedup.fschunk.ChunkRun)
    }
    
    static {
      defaultInstance = new ChunkRun(true);
      de.pc2.dedup.fschunk.Protocol.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:de.pc2.dedup.fschunk.ChunkRun)
  }
  
  public static final class File extends
      com.google.protobuf.GeneratedMessage {
    // Use File.newBuilder() to construct.
    private File() {
      initFields();
    }
    private File(boolean noInit) {}
    
    private static final File defaultInstance;
    public static File getDefaultInstance() {
      return defaultInstance;
    }
    
    public File getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return de.pc2.dedup.fschunk.Protocol.internal_static_de_pc2_dedup_fschunk_File_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return de.pc2.dedup.fschunk.Protocol.internal_static_de_pc2_dedup_fschunk_File_fieldAccessorTable;
    }
    
    // optional string filename = 1;
    public static final int FILENAME_FIELD_NUMBER = 1;
    private boolean hasFilename;
    private java.lang.String filename_ = "";
    public boolean hasFilename() { return hasFilename; }
    public java.lang.String getFilename() { return filename_; }
    
    // optional uint64 size = 2;
    public static final int SIZE_FIELD_NUMBER = 2;
    private boolean hasSize;
    private long size_ = 0L;
    public boolean hasSize() { return hasSize; }
    public long getSize() { return size_; }
    
    // optional string type = 3;
    public static final int TYPE_FIELD_NUMBER = 3;
    private boolean hasType;
    private java.lang.String type_ = "";
    public boolean hasType() { return hasType; }
    public java.lang.String getType() { return type_; }
    
    // optional uint32 chunkCount = 4;
    public static final int CHUNKCOUNT_FIELD_NUMBER = 4;
    private boolean hasChunkCount;
    private int chunkCount_ = 0;
    public boolean hasChunkCount() { return hasChunkCount; }
    public int getChunkCount() { return chunkCount_; }
    
    // optional string label = 5;
    public static final int LABEL_FIELD_NUMBER = 5;
    private boolean hasLabel;
    private java.lang.String label_ = "";
    public boolean hasLabel() { return hasLabel; }
    public java.lang.String getLabel() { return label_; }
    
    // optional bool partial = 6 [default = false];
    public static final int PARTIAL_FIELD_NUMBER = 6;
    private boolean hasPartial;
    private boolean partial_ = false;
    public boolean hasPartial() { return hasPartial; }
    public boolean getPartial() { return partial_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasFilename()) {
        output.writeString(1, getFilename());
      }
      if (hasSize()) {
        output.writeUInt64(2, getSize());
      }
      if (hasType()) {
        output.writeString(3, getType());
      }
      if (hasChunkCount()) {
        output.writeUInt32(4, getChunkCount());
      }
      if (hasLabel()) {
        output.writeString(5, getLabel());
      }
      if (hasPartial()) {
        output.writeBool(6, getPartial());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasFilename()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getFilename());
      }
      if (hasSize()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, getSize());
      }
      if (hasType()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(3, getType());
      }
      if (hasChunkCount()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, getChunkCount());
      }
      if (hasLabel()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(5, getLabel());
      }
      if (hasPartial()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, getPartial());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static de.pc2.dedup.fschunk.Protocol.File parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static de.pc2.dedup.fschunk.Protocol.File parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static de.pc2.dedup.fschunk.Protocol.File parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static de.pc2.dedup.fschunk.Protocol.File parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static de.pc2.dedup.fschunk.Protocol.File parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static de.pc2.dedup.fschunk.Protocol.File parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static de.pc2.dedup.fschunk.Protocol.File parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static de.pc2.dedup.fschunk.Protocol.File parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static de.pc2.dedup.fschunk.Protocol.File parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static de.pc2.dedup.fschunk.Protocol.File parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(de.pc2.dedup.fschunk.Protocol.File prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private de.pc2.dedup.fschunk.Protocol.File result;
      
      // Construct using de.pc2.dedup.fschunk.Protocol.File.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new de.pc2.dedup.fschunk.Protocol.File();
        return builder;
      }
      
      protected de.pc2.dedup.fschunk.Protocol.File internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new de.pc2.dedup.fschunk.Protocol.File();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return de.pc2.dedup.fschunk.Protocol.File.getDescriptor();
      }
      
      public de.pc2.dedup.fschunk.Protocol.File getDefaultInstanceForType() {
        return de.pc2.dedup.fschunk.Protocol.File.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public de.pc2.dedup.fschunk.Protocol.File build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private de.pc2.dedup.fschunk.Protocol.File buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public de.pc2.dedup.fschunk.Protocol.File buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        de.pc2.dedup.fschunk.Protocol.File returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof de.pc2.dedup.fschunk.Protocol.File) {
          return mergeFrom((de.pc2.dedup.fschunk.Protocol.File)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(de.pc2.dedup.fschunk.Protocol.File other) {
        if (other == de.pc2.dedup.fschunk.Protocol.File.getDefaultInstance()) return this;
        if (other.hasFilename()) {
          setFilename(other.getFilename());
        }
        if (other.hasSize()) {
          setSize(other.getSize());
        }
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasChunkCount()) {
          setChunkCount(other.getChunkCount());
        }
        if (other.hasLabel()) {
          setLabel(other.getLabel());
        }
        if (other.hasPartial()) {
          setPartial(other.getPartial());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              setFilename(input.readString());
              break;
            }
            case 16: {
              setSize(input.readUInt64());
              break;
            }
            case 26: {
              setType(input.readString());
              break;
            }
            case 32: {
              setChunkCount(input.readUInt32());
              break;
            }
            case 42: {
              setLabel(input.readString());
              break;
            }
            case 48: {
              setPartial(input.readBool());
              break;
            }
          }
        }
      }
      
      
      // optional string filename = 1;
      public boolean hasFilename() {
        return result.hasFilename();
      }
      public java.lang.String getFilename() {
        return result.getFilename();
      }
      public Builder setFilename(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasFilename = true;
        result.filename_ = value;
        return this;
      }
      public Builder clearFilename() {
        result.hasFilename = false;
        result.filename_ = getDefaultInstance().getFilename();
        return this;
      }
      
      // optional uint64 size = 2;
      public boolean hasSize() {
        return result.hasSize();
      }
      public long getSize() {
        return result.getSize();
      }
      public Builder setSize(long value) {
        result.hasSize = true;
        result.size_ = value;
        return this;
      }
      public Builder clearSize() {
        result.hasSize = false;
        result.size_ = 0L;
        return this;
      }
      
      // optional string type = 3;
      public boolean hasType() {
        return result.hasType();
      }
      public java.lang.String getType() {
        return result.getType();
      }
      public Builder setType(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder clearType() {
        result.hasType = false;
        result.type_ = getDefaultInstance().getType();
        return this;
      }
      
      // optional uint32 chunkCount = 4;
      public boolean hasChunkCount() {
        return result.hasChunkCount();
      }
      public int getChunkCount() {
        return result.getChunkCount();
      }
      public Builder setChunkCount(int value) {
        result.hasChunkCount = true;
        result.chunkCount_ = value;
        return this;
      }
      public Builder clearChunkCount() {
        result.hasChunkCount = false;
        result.chunkCount_ = 0;
        return this;
      }
      
      // optional string label = 5;
      public boolean hasLabel() {
        return result.hasLabel();
      }
      public java.lang.String getLabel() {
        return result.getLabel();
      }
      public Builder setLabel(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasLabel = true;
        result.label_ = value;
        return this;
      }
      public Builder clearLabel() {
        result.hasLabel = false;
        result.label_ = getDefaultInstance().getLabel();
        return this;
      }
      
      // optional bool partial = 6 [default = false];
      public boolean hasPartial() {
        return result.hasPartial();
      }
      public boolean getPartial() {
        return result.getPartial();
      }
      public Builder setPartial(boolean value) {
        result.hasPartial = true;
        result.partial_ = value;
        return this;
      }
      public Builder clearPartial() {
        result.hasPartial = false;
        result.partial_ = false;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:de.pc2.dedup.fschunk.File)
    }
    
    static {
      defaultInstance = new File(true);
      de.pc2.dedup.fschunk.Protocol.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:de.pc2.dedup.fschunk.File)
  }
  
  public static final class Chunk extends
      com.google.protobuf.GeneratedMessage {
    // Use Chunk.newBuilder() to construct.
    private Chunk() {
      initFields();
    }
    private Chunk(boolean noInit) {}
    
    private static final Chunk defaultInstance;
    public static Chunk getDefaultInstance() {
      return defaultInstance;
    }
    
    public Chunk getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return de.pc2.dedup.fschunk.Protocol.internal_static_de_pc2_dedup_fschunk_Chunk_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return de.pc2.dedup.fschunk.Protocol.internal_static_de_pc2_dedup_fschunk_Chunk_fieldAccessorTable;
    }
    
    // optional bytes fp = 2;
    public static final int FP_FIELD_NUMBER = 2;
    private boolean hasFp;
    private com.google.protobuf.ByteString fp_ = com.google.protobuf.ByteString.EMPTY;
    public boolean hasFp() { return hasFp; }
    public com.google.protobuf.ByteString getFp() { return fp_; }
    
    // optional uint32 size = 3;
    public static final int SIZE_FIELD_NUMBER = 3;
    private boolean hasSize;
    private int size_ = 0;
    public boolean hasSize() { return hasSize; }
    public int getSize() { return size_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasFp()) {
        output.writeBytes(2, getFp());
      }
      if (hasSize()) {
        output.writeUInt32(3, getSize());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasFp()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getFp());
      }
      if (hasSize()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, getSize());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static de.pc2.dedup.fschunk.Protocol.Chunk parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static de.pc2.dedup.fschunk.Protocol.Chunk parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static de.pc2.dedup.fschunk.Protocol.Chunk parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static de.pc2.dedup.fschunk.Protocol.Chunk parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static de.pc2.dedup.fschunk.Protocol.Chunk parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static de.pc2.dedup.fschunk.Protocol.Chunk parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static de.pc2.dedup.fschunk.Protocol.Chunk parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static de.pc2.dedup.fschunk.Protocol.Chunk parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static de.pc2.dedup.fschunk.Protocol.Chunk parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static de.pc2.dedup.fschunk.Protocol.Chunk parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(de.pc2.dedup.fschunk.Protocol.Chunk prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private de.pc2.dedup.fschunk.Protocol.Chunk result;
      
      // Construct using de.pc2.dedup.fschunk.Protocol.Chunk.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new de.pc2.dedup.fschunk.Protocol.Chunk();
        return builder;
      }
      
      protected de.pc2.dedup.fschunk.Protocol.Chunk internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new de.pc2.dedup.fschunk.Protocol.Chunk();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return de.pc2.dedup.fschunk.Protocol.Chunk.getDescriptor();
      }
      
      public de.pc2.dedup.fschunk.Protocol.Chunk getDefaultInstanceForType() {
        return de.pc2.dedup.fschunk.Protocol.Chunk.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public de.pc2.dedup.fschunk.Protocol.Chunk build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private de.pc2.dedup.fschunk.Protocol.Chunk buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public de.pc2.dedup.fschunk.Protocol.Chunk buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        de.pc2.dedup.fschunk.Protocol.Chunk returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof de.pc2.dedup.fschunk.Protocol.Chunk) {
          return mergeFrom((de.pc2.dedup.fschunk.Protocol.Chunk)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(de.pc2.dedup.fschunk.Protocol.Chunk other) {
        if (other == de.pc2.dedup.fschunk.Protocol.Chunk.getDefaultInstance()) return this;
        if (other.hasFp()) {
          setFp(other.getFp());
        }
        if (other.hasSize()) {
          setSize(other.getSize());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 18: {
              setFp(input.readBytes());
              break;
            }
            case 24: {
              setSize(input.readUInt32());
              break;
            }
          }
        }
      }
      
      
      // optional bytes fp = 2;
      public boolean hasFp() {
        return result.hasFp();
      }
      public com.google.protobuf.ByteString getFp() {
        return result.getFp();
      }
      public Builder setFp(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasFp = true;
        result.fp_ = value;
        return this;
      }
      public Builder clearFp() {
        result.hasFp = false;
        result.fp_ = getDefaultInstance().getFp();
        return this;
      }
      
      // optional uint32 size = 3;
      public boolean hasSize() {
        return result.hasSize();
      }
      public int getSize() {
        return result.getSize();
      }
      public Builder setSize(int value) {
        result.hasSize = true;
        result.size_ = value;
        return this;
      }
      public Builder clearSize() {
        result.hasSize = false;
        result.size_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:de.pc2.dedup.fschunk.Chunk)
    }
    
    static {
      defaultInstance = new Chunk(true);
      de.pc2.dedup.fschunk.Protocol.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:de.pc2.dedup.fschunk.Chunk)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_de_pc2_dedup_fschunk_ChunkRun_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_de_pc2_dedup_fschunk_ChunkRun_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_de_pc2_dedup_fschunk_File_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_de_pc2_dedup_fschunk_File_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_de_pc2_dedup_fschunk_Chunk_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_de_pc2_dedup_fschunk_Chunk_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\031src/main/other/fs-c.proto\022\024de.pc2.dedu" +
      "p.fschunk\"\036\n\010ChunkRun\022\022\n\nstart_date\030\001 \002(" +
      "\t\"o\n\004File\022\020\n\010filename\030\001 \001(\t\022\014\n\004size\030\002 \001(" +
      "\004\022\014\n\004type\030\003 \001(\t\022\022\n\nchunkCount\030\004 \001(\r\022\r\n\005l" +
      "abel\030\005 \001(\t\022\026\n\007partial\030\006 \001(\010:\005false\"!\n\005Ch" +
      "unk\022\n\n\002fp\030\002 \001(\014\022\014\n\004size\030\003 \001(\rB\nB\010Protoco" +
      "l"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_de_pc2_dedup_fschunk_ChunkRun_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_de_pc2_dedup_fschunk_ChunkRun_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_de_pc2_dedup_fschunk_ChunkRun_descriptor,
              new java.lang.String[] { "StartDate", },
              de.pc2.dedup.fschunk.Protocol.ChunkRun.class,
              de.pc2.dedup.fschunk.Protocol.ChunkRun.Builder.class);
          internal_static_de_pc2_dedup_fschunk_File_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_de_pc2_dedup_fschunk_File_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_de_pc2_dedup_fschunk_File_descriptor,
              new java.lang.String[] { "Filename", "Size", "Type", "ChunkCount", "Label", "Partial", },
              de.pc2.dedup.fschunk.Protocol.File.class,
              de.pc2.dedup.fschunk.Protocol.File.Builder.class);
          internal_static_de_pc2_dedup_fschunk_Chunk_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_de_pc2_dedup_fschunk_Chunk_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_de_pc2_dedup_fschunk_Chunk_descriptor,
              new java.lang.String[] { "Fp", "Size", },
              de.pc2.dedup.fschunk.Protocol.Chunk.class,
              de.pc2.dedup.fschunk.Protocol.Chunk.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  public static void internalForceInit() {}
  
  // @@protoc_insertion_point(outer_class_scope)
}
